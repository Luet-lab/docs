<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Luet ‚Äì Documentation</title>
    <link>https://luet-lab.github.io/docs/docs/</link>
    <description>Recent content in Documentation on Luet</description>
    <generator>Hugo -- gohugo.io</generator>
    
	  <atom:link href="https://luet-lab.github.io/docs/docs/index.xml" rel="self" type="application/rss+xml" />
    
    
      
        
      
    
    
    <item>
      <title>Docs: ARM images</title>
      <link>https://luet-lab.github.io/docs/docs/examples/arm/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://luet-lab.github.io/docs/docs/examples/arm/</guid>
      <description>
        
        
        

&lt;p&gt;We will see an example on how to build burnable SD images for Raspberry PI with Luet. This approach let you describe and version OTA upgrades for your embedded devices, delivering upgrades as layer upgrades on the pi.&lt;/p&gt;

&lt;p&gt;The other good side of the medal is that you can build a Luet package repository with multiple distributions (e.g. &lt;code&gt;Raspbian&lt;/code&gt;, &lt;code&gt;OpenSUSE&lt;/code&gt;, &lt;code&gt;Gentoo&lt;/code&gt;, &amp;hellip; ) and switch among them in runtime. In the above example &lt;code&gt;Raspbian&lt;/code&gt; and &lt;code&gt;Funtoo&lt;/code&gt; (at the time of writing) are available.&lt;/p&gt;

&lt;h2 id=&#34;prerequisites&#34;&gt;Prerequisites&lt;/h2&gt;

&lt;p&gt;You have to run the following steps inside an ARM board to produce arm-compatible binaries. Whatever distribution with Docker will work. Note that the same steps could be done in a cross-compilation approach, or either with qemu-binfmt in a amd64 host.&lt;/p&gt;

&lt;p&gt;You will also need in your host:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Docker&lt;/li&gt;
&lt;li&gt;luet installed (+container-diff) in &lt;code&gt;/usr/bin/luet&lt;/code&gt; (arm build)&lt;/li&gt;
&lt;li&gt;make&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;build-the-packages&#34;&gt;Build the packages&lt;/h2&gt;

&lt;p&gt;Clone the repository &lt;a href=&#34;https://github.com/Luet-lab/luet-embedded&#34; target=&#34;_blank&#34;&gt;https://github.com/Luet-lab/luet-embedded&lt;/a&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$&amp;gt; git clone https://github.com/Luet-lab/luet-embedded
$&amp;gt; cd luet-embedded
$&amp;gt; sudo make build-all
...
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;While to rebuild, after doing changes, just do: &lt;code&gt;sudo make rebuild-all&lt;/code&gt;&lt;/p&gt;

&lt;h2 id=&#34;create-the-repository&#34;&gt;Create the repository&lt;/h2&gt;

&lt;pre&gt;&lt;code&gt;$&amp;gt; sudo make create-repo
...
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;serve-the-repo-locally&#34;&gt;Serve the repo locally&lt;/h2&gt;

&lt;pre&gt;&lt;code&gt;$&amp;gt; make serve-repo
...
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;create-the-flashable-image&#34;&gt;Create the flashable image&lt;/h2&gt;

&lt;h3 id=&#34;funtoo-based-system&#34;&gt;Funtoo based system&lt;/h3&gt;

&lt;pre&gt;&lt;code&gt;$&amp;gt; sudo LUET_PACKAGES=&#39;distro/funtoo-1.4 distro/raspbian-boot-0.20191208 system/luet-develop-0.5&#39; make image
...
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;raspbian-based-system&#34;&gt;Raspbian based system&lt;/h3&gt;

&lt;pre&gt;&lt;code&gt;$&amp;gt; sudo LUET_PACKAGES=&#39;distro/raspbian-0.20191208 distro/raspbian-boot-0.20191208 system/luet-develop-0.5&#39; make image
...
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;At the end of the process, a file &lt;code&gt;luet_os.img&lt;/code&gt; should be present in the current folder, ready to be flashed to an SD.&lt;/p&gt;

&lt;h2 id=&#34;add-packages&#34;&gt;Add packages&lt;/h2&gt;

&lt;p&gt;In order to build and add packages to the exiting repository, simply add or edit the specfiles under the &lt;code&gt;distro&lt;/code&gt; folder. When doing &lt;code&gt;make rebuild-all&lt;/code&gt; they will be automatically compiled and made available to the local repository.&lt;/p&gt;

      </description>
    </item>
    
    <item>
      <title>Docs: Building</title>
      <link>https://luet-lab.github.io/docs/docs/examples/building/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://luet-lab.github.io/docs/docs/examples/building/</guid>
      <description>
        
        
        

&lt;h2 id=&#34;simple-package-build&#34;&gt;Simple package build&lt;/h2&gt;

&lt;p&gt;Create a simple package definition and build it:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$&amp;gt; mkdir package

$&amp;gt; cat &amp;lt;&amp;lt;EOF &amp;gt; package/build.yaml
image: busybox
steps:
- echo &amp;quot;foo&amp;quot; &amp;gt; /foo
EOF

$&amp;gt; cat &amp;lt;&amp;lt;EOF &amp;gt; package/definition.yaml
name: &amp;quot;foo&amp;quot;
version: &amp;quot;0.1&amp;quot;
EOF

$&amp;gt; luet build --all

üì¶  Selecting  foo 0.1
üì¶  Compiling foo version 0.1 .... ‚òï
üêã  Downloading image luet/cache-foo-bar-0.1-builder
üêã  Downloading image luet/cache-foo-bar-0.1
üì¶   foo Generating üêã  definition for builder image from busybox
üêã  Building image luet/cache-foo-bar-0.1-builder
üêã  Building image luet/cache-foo-bar-0.1-builder done
 Sending build context to Docker daemon  4.096kB
 ...

&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;build-packages&#34;&gt;Build packages&lt;/h3&gt;

&lt;p&gt;To build a specific version, the full package definition (triple of &lt;code&gt;category&lt;/code&gt;, &lt;code&gt;name&lt;/code&gt; and &lt;code&gt;version&lt;/code&gt;) has to be specified.
In this example we will also enable package compression (gzip).&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$&amp;gt; mkdir package

$&amp;gt; cat &amp;lt;&amp;lt;EOF &amp;gt; package/build.yaml
image: busybox
steps:
- echo &amp;quot;foo&amp;quot; &amp;gt; /foo
EOF

$&amp;gt; cat &amp;lt;&amp;lt;EOF &amp;gt; package/definition.yaml
name: &amp;quot;foo&amp;quot;
version: &amp;quot;0.1&amp;quot;
category: &amp;quot;bar&amp;quot;
EOF

$&amp;gt; luet build bar/foo-0.1 --compression gzip

üì¶  Selecting  foo 0.1
üì¶  Compiling foo version 0.1 .... ‚òï
üêã  Downloading image luet/cache-foo-bar-0.1-builder
üêã  Downloading image luet/cache-foo-bar-0.1
üì¶   foo Generating üêã  definition for builder image from busybox
üêã  Building image luet/cache-foo-bar-0.1-builder
üêã  Building image luet/cache-foo-bar-0.1-builder done
 Sending build context to Docker daemon  4.096kB
 ...

&lt;/code&gt;&lt;/pre&gt;

      </description>
    </item>
    
    <item>
      <title>Docs: CSP and SAT</title>
      <link>https://luet-lab.github.io/docs/docs/concepts/constraints/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://luet-lab.github.io/docs/docs/concepts/constraints/</guid>
      <description>
        
        
        
      </description>
    </item>
    
    <item>
      <title>Docs: Package</title>
      <link>https://luet-lab.github.io/docs/docs/concepts/packages/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://luet-lab.github.io/docs/docs/concepts/packages/</guid>
      <description>
        
        
        

&lt;p&gt;A Package in Luet is denoted by a triple (&lt;code&gt;name&lt;/code&gt;, &lt;code&gt;category&lt;/code&gt; and &lt;code&gt;version&lt;/code&gt;), here called &lt;em&gt;package form&lt;/em&gt;.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-yaml&#34; data-lang=&#34;yaml&#34;&gt;name&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#34;awesome&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;&lt;/span&gt;version&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#34;0.1&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;&lt;/span&gt;category&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#34;foo&amp;#34;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;While &lt;code&gt;category&lt;/code&gt; and &lt;code&gt;version&lt;/code&gt; can be omitted, the name is required. Note that in &lt;code&gt;build.yaml&lt;/code&gt; and in &lt;code&gt;definition.yaml&lt;/code&gt; files, list of packages are represented by the same triple:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-yaml&#34; data-lang=&#34;yaml&#34;&gt;requires&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;&lt;/span&gt;-&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt; &lt;/span&gt;name&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#34;awesome&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;  &lt;/span&gt;version&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#34;0.1&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;  &lt;/span&gt;category&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#34;foo&amp;#34;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;They are nested in a list, allowing to specify as many as wanted:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-yaml&#34; data-lang=&#34;yaml&#34;&gt;requires&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;&lt;/span&gt;-&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt; &lt;/span&gt;name&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#34;awesome&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;  &lt;/span&gt;version&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#34;0.1&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;  &lt;/span&gt;category&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#34;foo&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;&lt;/span&gt;-&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt; &lt;/span&gt;name&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#34;awesome2&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;  &lt;/span&gt;version&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#34;9999&amp;#34;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id=&#34;package-building-process&#34;&gt;Package building process&lt;/h2&gt;

&lt;p&gt;When a package is required to be built, Luet resolves the dependency trees and it orders the spec files to satisfy the given contraints.&lt;/p&gt;

&lt;p&gt;Each package has a build context which corresponds where the spec files are found (&lt;code&gt;definition.yaml&lt;/code&gt; and &lt;code&gt;build.yaml&lt;/code&gt;), this means that in the container which is running the build process are accessible the sources refered to the build. &lt;em&gt;Note: you can use this mechanism to provide helper scripts or even static binaries to seed your images from scratch&lt;/em&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;‚ùØ tree distro/raspbian/buster
distro/raspbian/buster
‚îú‚îÄ‚îÄ build.sh
‚îú‚îÄ‚îÄ build.yaml
‚îú‚îÄ‚îÄ definition.yaml
‚îî‚îÄ‚îÄ finalize.yaml
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;In the example above, build.sh is accessible in build time.&lt;/p&gt;

&lt;p&gt;It can be invoked easily in build time by specifying in &lt;code&gt;build.yaml&lt;/code&gt;:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-yaml&#34; data-lang=&#34;yaml&#34;&gt;steps&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;&lt;/span&gt;-&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt; &lt;/span&gt;sh&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt; &lt;/span&gt;build.sh&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id=&#34;package-provides&#34;&gt;Package provides&lt;/h2&gt;

&lt;p&gt;Packages can specify a list of &lt;code&gt;provides&lt;/code&gt;. It is a list of packages in &lt;em&gt;package form&lt;/em&gt; which indicates that the current definition &lt;em&gt;replaces&lt;/em&gt; every occurrence of the packages in this list (both in &lt;em&gt;build&lt;/em&gt; and &lt;em&gt;runtime&lt;/em&gt;). This mechanism is particularly helpful for handling package moves or to have virtual packages.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Note: packages that in the &lt;code&gt;provides&lt;/code&gt; list don&amp;rsquo;t have to necessarly exist or either have a valid build definition.&lt;/em&gt;&lt;/p&gt;

      </description>
    </item>
    
    <item>
      <title>Docs: Images from scratch</title>
      <link>https://luet-lab.github.io/docs/docs/examples/scratch/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://luet-lab.github.io/docs/docs/examples/scratch/</guid>
      <description>
        
        
        &lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;cat &lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;lt;&amp;lt;EOF &amp;gt; $PWD/luet.yaml  
&lt;/span&gt;&lt;span style=&#34;color:#4e9a06&#34;&gt;system-repositories: 
&lt;/span&gt;&lt;span style=&#34;color:#4e9a06&#34;&gt;                   - name: &amp;#34;main&amp;#34;
&lt;/span&gt;&lt;span style=&#34;color:#4e9a06&#34;&gt;                     type: &amp;#34;http&amp;#34;
&lt;/span&gt;&lt;span style=&#34;color:#4e9a06&#34;&gt;                     uri: &amp;#34;https://your-repo.org/path&amp;#34;
&lt;/span&gt;&lt;span style=&#34;color:#4e9a06&#34;&gt;EOF&lt;/span&gt;

docker rm luet-runtime-test &lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;||&lt;/span&gt; &lt;span style=&#34;color:#204a87&#34;&gt;true&lt;/span&gt;
docker run --name luet-runtime-test &lt;span style=&#34;color:#4e9a06&#34;&gt;\
&lt;/span&gt;&lt;span style=&#34;color:#4e9a06&#34;&gt;&lt;/span&gt;       -ti -v /tmp:/tmp &lt;span style=&#34;color:#4e9a06&#34;&gt;\
&lt;/span&gt;&lt;span style=&#34;color:#4e9a06&#34;&gt;&lt;/span&gt;       -v &lt;span style=&#34;color:#000&#34;&gt;$PWD&lt;/span&gt;/luet.yaml:/etc/luet/.luet.yaml:ro &lt;span style=&#34;color:#4e9a06&#34;&gt;\
&lt;/span&gt;&lt;span style=&#34;color:#4e9a06&#34;&gt;&lt;/span&gt;       quay.io/luet/base install &amp;lt;package&amp;gt;
 
docker commit luet-runtime-test luet-runtime-test-image

&lt;span style=&#34;color:#8f5902;font-style:italic&#34;&gt;# Try your new image!&lt;/span&gt;

docker run -ti --entrypoint /bin/sh --rm luet-runtime-test-image&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
      </description>
    </item>
    
    <item>
      <title>Docs: Specfile</title>
      <link>https://luet-lab.github.io/docs/docs/concepts/specfile/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://luet-lab.github.io/docs/docs/concepts/specfile/</guid>
      <description>
        
        
        

&lt;h2 id=&#34;specfiles&#34;&gt;Specfiles&lt;/h2&gt;

&lt;p&gt;Luet packages are defined by specfiles. They define the runtime and builtime requirements of a package.
There is an hard distinction between runtime and buildtime. A spec is composed at least by the runtime (&lt;code&gt;definition.yaml&lt;/code&gt;) and the buildtime specification (&lt;code&gt;build.yaml&lt;/code&gt;).&lt;/p&gt;

&lt;p&gt;A Folder containing a &lt;code&gt;build.yaml&lt;/code&gt; and a &lt;code&gt;definition.yaml&lt;/code&gt; form a specfile. A Luet tree is merely a composition of specfile(s).  There is no constriction on folder naming or hierarchy either.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Example of a &lt;a href=&#34;https://github.com/Luet-lab/luet-embedded/tree/master/distro&#34; target=&#34;_blank&#34;&gt;tree folder hierarchy&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;tree distro                                                      
distro
‚îú‚îÄ‚îÄ funtoo              
‚îÇ¬†¬† ‚îú‚îÄ‚îÄ &lt;span style=&#34;color:#0000cf;font-weight:bold&#34;&gt;1&lt;/span&gt;.4
‚îÇ¬†¬† ‚îÇ¬†¬† ‚îú‚îÄ‚îÄ build.sh        
‚îÇ¬†¬† ‚îÇ¬†¬† ‚îú‚îÄ‚îÄ build.yaml                                             
‚îÇ¬†¬† ‚îÇ¬†¬† ‚îú‚îÄ‚îÄ definition.yaml
‚îÇ¬†¬† ‚îÇ¬†¬† ‚îî‚îÄ‚îÄ finalize.yaml
‚îÇ¬†¬† ‚îú‚îÄ‚îÄ docker
‚îÇ¬†¬† ‚îÇ¬†¬† ‚îú‚îÄ‚îÄ build.yaml
‚îÇ¬†¬† ‚îÇ¬†¬† ‚îú‚îÄ‚îÄ definition.yaml
‚îÇ¬†¬† ‚îÇ¬†¬† ‚îî‚îÄ‚îÄ finalize.yaml
‚îÇ¬†¬† ‚îî‚îÄ‚îÄ meta
‚îÇ¬†¬†     ‚îî‚îÄ‚îÄ rpi
‚îÇ¬†¬†         ‚îî‚îÄ‚îÄ &lt;span style=&#34;color:#0000cf;font-weight:bold&#34;&gt;0&lt;/span&gt;.1
‚îÇ¬†¬†             ‚îú‚îÄ‚îÄ build.yaml
‚îÇ¬†¬†             ‚îî‚îÄ‚îÄ definition.yaml
‚îú‚îÄ‚îÄ packages
‚îÇ¬†¬† ‚îú‚îÄ‚îÄ container-diff
‚îÇ¬†¬† ‚îÇ¬†¬† ‚îî‚îÄ‚îÄ &lt;span style=&#34;color:#0000cf;font-weight:bold&#34;&gt;0&lt;/span&gt;.15.0
‚îÇ¬†¬† ‚îÇ¬†¬†     ‚îú‚îÄ‚îÄ build.yaml
‚îÇ¬†¬† ‚îÇ¬†¬†     ‚îî‚îÄ‚îÄ definition.yaml
‚îÇ¬†¬† ‚îî‚îÄ‚îÄ luet
‚îÇ¬†¬†     ‚îú‚îÄ‚îÄ build.yaml
‚îÇ¬†¬†     ‚îî‚îÄ‚îÄ definition.yaml
‚îú‚îÄ‚îÄ raspbian
‚îÇ¬†¬† ‚îú‚îÄ‚îÄ buster
‚îÇ¬†¬† ‚îÇ¬†¬† ‚îú‚îÄ‚îÄ build.sh
‚îÇ¬†¬† ‚îÇ¬†¬† ‚îú‚îÄ‚îÄ build.yaml
‚îÇ¬†¬† ‚îÇ¬†¬† ‚îú‚îÄ‚îÄ definition.yaml
‚îÇ¬†¬† ‚îÇ¬†¬† ‚îî‚îÄ‚îÄ finalize.yaml
‚îÇ¬†¬† ‚îú‚îÄ‚îÄ buster-boot
‚îÇ¬†¬† ‚îÇ¬†¬† ‚îú‚îÄ‚îÄ build.sh
‚îÇ¬†¬† ‚îÇ¬†¬† ‚îú‚îÄ‚îÄ build.yaml
‚îÇ¬†¬† ‚îÇ¬†¬† ‚îú‚îÄ‚îÄ definition.yaml
‚îÇ¬†¬† ‚îÇ¬†¬† ‚îî‚îÄ‚îÄ finalize.yaml&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id=&#34;build-specs&#34;&gt;Build specs&lt;/h3&gt;

&lt;p&gt;Build specs are defined in &lt;code&gt;build.yaml&lt;/code&gt; files. They denote the build-time &lt;code&gt;dependencies&lt;/code&gt; and &lt;code&gt;conflicts&lt;/code&gt; along with a definition of the content of the package.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Example of a &lt;code&gt;build.yaml&lt;/code&gt; file&lt;/em&gt;:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-yaml&#34; data-lang=&#34;yaml&#34;&gt;steps&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;&lt;/span&gt;-&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt; &lt;/span&gt;echo&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#34;Luet is awesome&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt; &lt;/span&gt;&amp;gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt; &lt;/span&gt;/awesome&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;&lt;/span&gt;prelude&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;&lt;/span&gt;-&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt; &lt;/span&gt;echo&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#34;nooops!&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;&lt;/span&gt;requires&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;&lt;/span&gt;-&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt; &lt;/span&gt;name&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#34;echo&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;  &lt;/span&gt;version&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#34;&amp;gt;=1.0&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;&lt;/span&gt;conflicts&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;&lt;/span&gt;-&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt; &lt;/span&gt;name&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#34;foo&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;  &lt;/span&gt;version&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#34;&amp;gt;=1.0&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;&lt;/span&gt;provides&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;&lt;/span&gt;-&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt; &lt;/span&gt;name&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#34;bar&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;  &lt;/span&gt;version&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#34;&amp;gt;=1.0&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;&lt;/span&gt;environment&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;&lt;/span&gt;-&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt; &lt;/span&gt;FOO=bar&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;&lt;/span&gt;includes&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;&lt;/span&gt;-&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt; &lt;/span&gt;/awesome&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;&lt;/span&gt;unpack&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;true&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h4 id=&#34;keywords&#34;&gt;Keywords&lt;/h4&gt;

&lt;p&gt;Global:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;environment&lt;/code&gt;: List of environment variables ( in &lt;code&gt;NAME=value&lt;/code&gt; format ) that are expanded in &lt;code&gt;step&lt;/code&gt; and in &lt;code&gt;prelude&lt;/code&gt;. ( e.g. &lt;code&gt;${NAME}&lt;/code&gt; )&lt;/li&gt;
&lt;li&gt;&lt;code&gt;step&lt;/code&gt;: List of commands to perform in the build container&lt;/li&gt;
&lt;li&gt;&lt;code&gt;prelude&lt;/code&gt;: List of commands to perform in the build container before building&lt;/li&gt;
&lt;li&gt;&lt;code&gt;unpack&lt;/code&gt;: Boolean which indicates if the package content &lt;strong&gt;is&lt;/strong&gt; the whole container content.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;includes&lt;/code&gt;: List of strings which are encoded in logical AND, they denote the content to filter from the container image to be packed. Wildcards and golang regexes are supported. If specified, files that don&amp;rsquo;t much any of the regex in the list won&amp;rsquo;t be included in the final package.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Source from external image (e.g. Docker):&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;image&lt;/code&gt;: List of packages which it provides&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;From a tree dependency:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;requires&lt;/code&gt;: List of packages which it depends on&lt;/li&gt;
&lt;li&gt;&lt;code&gt;conflicts&lt;/code&gt;: List of packages which it conflicts with&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;rutime-specs&#34;&gt;Rutime specs&lt;/h3&gt;

&lt;p&gt;Runtime specification are denoted in a &lt;code&gt;definition.yaml&lt;/code&gt; sibiling file. It identifies the package and the runtime contraints.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;definition.yaml&lt;/em&gt;:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-yaml&#34; data-lang=&#34;yaml&#34;&gt;name&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#34;awesome&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;&lt;/span&gt;version&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#34;0.1&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;&lt;/span&gt;category&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#34;foo&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;&lt;/span&gt;requires&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;&lt;/span&gt;-&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt; &lt;/span&gt;name&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#34;echo&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;  &lt;/span&gt;version&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#34;&amp;gt;=1.0&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;  &lt;/span&gt;category&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#34;bar&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;&lt;/span&gt;conflicts&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;&lt;/span&gt;-&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt; &lt;/span&gt;name&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#34;foo&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;  &lt;/span&gt;version&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#34;1.0&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;&lt;/span&gt;provides&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;&lt;/span&gt;-&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt; &lt;/span&gt;name&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#34;bar&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;  &lt;/span&gt;version&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#34;&amp;lt;1.0&amp;#34;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h4 id=&#34;keywords-1&#34;&gt;Keywords&lt;/h4&gt;

&lt;p&gt;Global:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;name&lt;/code&gt;: Name of the package &lt;strong&gt;required&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;version&lt;/code&gt;: Version of the package in semver notation. Selectors here are not supported. You can use selectors (&lt;code&gt;&amp;gt;=&lt;/code&gt;,&lt;code&gt;&amp;lt;&lt;/code&gt;,&lt;code&gt;&amp;gt;&lt;/code&gt;,&lt;code&gt;&amp;lt;=&lt;/code&gt;) only in dependency lists.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;category&lt;/code&gt;: Category of the package&lt;/li&gt;
&lt;li&gt;&lt;code&gt;provides&lt;/code&gt;: List of packages which it replaces&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Runtime dependency list:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;requires&lt;/code&gt;: List of packages which it depends on runtime&lt;/li&gt;
&lt;li&gt;&lt;code&gt;conflicts&lt;/code&gt;: List of packages which it conflicts with in runtime&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;finalizers&#34;&gt;Finalizers&lt;/h3&gt;

&lt;p&gt;Finalizers are denoted in a &lt;code&gt;finalize.yaml&lt;/code&gt; file which is a sibiling of &lt;code&gt;definition.yaml&lt;/code&gt; and &lt;code&gt;build.yaml&lt;/code&gt; file. It contains a list of commands that finalize the package when it is installed in the machine.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;finalize.yaml&lt;/em&gt;:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-yaml&#34; data-lang=&#34;yaml&#34;&gt;install&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;&lt;/span&gt;-&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt; &lt;/span&gt;rc-update&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt; &lt;/span&gt;add&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt; &lt;/span&gt;docker&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt; &lt;/span&gt;default&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt; &lt;/span&gt;||&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;true&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h4 id=&#34;keywords-2&#34;&gt;Keywords&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;install&lt;/code&gt;: List of commands to run in the host machine. They are all fatal by default.&lt;/li&gt;
&lt;/ul&gt;

      </description>
    </item>
    
    <item>
      <title>Docs: Build packages</title>
      <link>https://luet-lab.github.io/docs/docs/overview/build_packages/</link>
      <pubDate>Sat, 14 Dec 2019 00:00:00 +0000</pubDate>
      
      <guid>https://luet-lab.github.io/docs/docs/overview/build_packages/</guid>
      <description>
        
        
        

&lt;p&gt;Building a package with Luet requires a definition only. It can be self-contained and be only composed of one spec, or a group of them, forming a Luet tree.&lt;/p&gt;

&lt;p&gt;The &lt;code&gt;build&lt;/code&gt; help command is the following:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;build packages or trees from luet tree definitions. Packages are in [category]/[name]-[version] form

Usage:
  luet build &amp;lt;package name&amp;gt; &amp;lt;package name&amp;gt; &amp;lt;package name&amp;gt; ... [flags]

Flags:
      --all                  Build all packages in the tree
      --backend string       backend used (docker,img) (default &amp;quot;docker&amp;quot;)
      --clean                Build all packages without considering the packages present in the build directory (default true)
      --compression string   Compression alg: none, gzip (default &amp;quot;none&amp;quot;)
      --database string      database used for solving (memory,boltdb) (default &amp;quot;memory&amp;quot;)
      --destination string   Destination folder (default currentpath)
  -h, --help                 help for build
      --privileged           Privileged (Keep permissions)
      --revdeps              Build with revdeps
      --tree string          Source luet tree

Global Flags:
      --concurrency int   Concurrency (default 8)
      --config string     config file (default is $HOME/.luet.yaml)
      --fatal             Enables Warnings to exit
  -v, --verbose           verbose output
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Build accepts a list of packages to build, which syntax is in the &lt;code&gt;category/name-version&lt;/code&gt; format (following Gentoo syntax).&lt;/p&gt;

&lt;h2 id=&#34;flags&#34;&gt;Flags&lt;/h2&gt;

&lt;p&gt;Flags available for the build command&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;&amp;ndash;all&lt;/strong&gt;: Boolean which instruct Luet to build all the specs contained in a tree&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;&amp;ndash;backend&lt;/strong&gt;: String that specifies the backend to use. Currently supported are : &lt;code&gt;docker&lt;/code&gt; and &lt;code&gt;img&lt;/code&gt;. Defaults to &lt;code&gt;docker&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;&amp;ndash;clean&lt;/strong&gt;: Boolean that when enabled perform a clean build without taking in consideration already existing artifacts&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;&amp;ndash;compression&lt;/strong&gt;: Specify a compression algorithm. Currently available only tgz. Defaults to no compression&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;&amp;ndash;database&lt;/strong&gt;: Type of database which is used for solving. This setting is particularly helpful for big trees composed of many packages on small devices where available memory is limited. Currently available &lt;code&gt;boltdb&lt;/code&gt; and &lt;code&gt;memory&lt;/code&gt;. Defaults to &lt;code&gt;memory&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;&amp;ndash;destination&lt;/strong&gt;: Output folder where the generated artifacts are written.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;&amp;ndash;privileged&lt;/strong&gt;: Boolean which indicates that the build is privileged and file permission bits in the packages are copeid as-is.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;&amp;ndash;revdeps&lt;/strong&gt;: Boolean which indicates to build also all the packages which depends on the targets&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;&amp;ndash;tree&lt;/strong&gt;: Path to the tree specfiles, it defaults to the current directory.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;General flags:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;&amp;ndash;concurrency&lt;/strong&gt;: Indicates the number of concurrent package builds&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;&amp;ndash;config&lt;/strong&gt;: Indicates a config file to read&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;&amp;ndash;fatal&lt;/strong&gt;: Treats all warnings as fatal&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;&amp;ndash;verbose&lt;/strong&gt;: Enables verbose output&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;examples&#34;&gt;Examples&lt;/h2&gt;

&lt;p&gt;Create a simple package definition and build it:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$&amp;gt; mkdir package

$&amp;gt; cat &amp;lt;&amp;lt;EOF &amp;gt; package/build.yaml
image: busybox
steps:
- echo &amp;quot;foo&amp;quot; &amp;gt; /foo
EOF

$&amp;gt; cat &amp;lt;&amp;lt;EOF &amp;gt; package/definition.yaml
name: &amp;quot;foo&amp;quot;
version: &amp;quot;0.1&amp;quot;
category: &amp;quot;bar&amp;quot; # optional!
EOF

$&amp;gt; luet build --all

üì¶  Selecting  foo 0.1
üì¶  Compiling foo version 0.1 .... ‚òï
üêã  Downloading image luet/cache-foo-bar-0.1-builder
üêã  Downloading image luet/cache-foo-bar-0.1
üì¶   foo Generating üêã  definition for builder image from busybox
üêã  Building image luet/cache-foo-bar-0.1-builder
üêã  Building image luet/cache-foo-bar-0.1-builder done
 Sending build context to Docker daemon  4.096kB
 ...

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;In order to consume the repository by a client, it is sufficient to create the repository:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$&amp;gt; luet create-repo
 For repository luet creating revision 1 and last update 1580640083...
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Which generates a &lt;code&gt;repository.yaml&lt;/code&gt; file containing the repository metadata needed by the client when consuming the packages.&lt;/p&gt;

      </description>
    </item>
    
    <item>
      <title>Docs: Build requirements</title>
      <link>https://luet-lab.github.io/docs/docs/getting-started/requirements/</link>
      <pubDate>Sat, 14 Dec 2019 00:00:00 +0000</pubDate>
      
      <guid>https://luet-lab.github.io/docs/docs/getting-started/requirements/</guid>
      <description>
        
        
        

&lt;p&gt;Luet currently supports &lt;a href=&#34;https://www.docker.com/&#34; target=&#34;_blank&#34;&gt;Docker&lt;/a&gt; and &lt;a href=&#34;https://github.com/genuinetools/img&#34; target=&#34;_blank&#34;&gt;Img&lt;/a&gt;. Both backend can be used, and they can be switched in runtime.&lt;/p&gt;

&lt;h2 id=&#34;docker&#34;&gt;Docker&lt;/h2&gt;

&lt;p&gt;Docker is the (less) experimental Luet engine supported. Be sure in your system to have Docker installed and the daemon running.
The user which is running &lt;code&gt;luet&lt;/code&gt; commands needs the permission to execute the &lt;code&gt;docker&lt;/code&gt; executable, and to connect to a &lt;code&gt;docker&lt;/code&gt; daemon.
The only feature needed by the daemon is the ability to build images, so it fully supports remote daemon as well. (They can be specified with the &lt;code&gt;DOCKER_HOST&lt;/code&gt; environment variable, that is respected by &lt;code&gt;luet&lt;/code&gt;)&lt;/p&gt;

&lt;h2 id=&#34;img&#34;&gt;Img&lt;/h2&gt;

&lt;p&gt;Luet supports &lt;a href=&#34;https://github.com/genuinetools/img&#34; target=&#34;_blank&#34;&gt;Img&lt;/a&gt;. To use it, simply install it in your system, and while running &lt;code&gt;luet build&lt;/code&gt;, you can switch the backend by providing it as a parameter: &lt;code&gt;luet build --backend img&lt;/code&gt;. For small packages it is particularly powerful, as doesn&amp;rsquo;t require any docker daemon running in the host.&lt;/p&gt;

&lt;h2 id=&#34;container-diff&#34;&gt;Container-diff&lt;/h2&gt;

&lt;p&gt;Luet requires &lt;a href=&#34;https://github.com/GoogleContainerTools/container-diff&#34; target=&#34;_blank&#34;&gt;Container-diff&lt;/a&gt; installed in your system. It is used to construct your package if it is composed by image diffs.&lt;/p&gt;

&lt;p&gt;Check out the &lt;a href=&#34;https://github.com/GoogleContainerTools/container-diff#installation&#34; target=&#34;_blank&#34;&gt;installation&lt;/a&gt; notes of container-diff, depending on your platform.&lt;/p&gt;

      </description>
    </item>
    
    <item>
      <title>Docs: Package repositories</title>
      <link>https://luet-lab.github.io/docs/docs/overview/repositories/</link>
      <pubDate>Sat, 14 Dec 2019 00:00:00 +0000</pubDate>
      
      <guid>https://luet-lab.github.io/docs/docs/overview/repositories/</guid>
      <description>
        
        
        

&lt;p&gt;After a set of packages was built, a repository must be created to make them accessible by Luet clients. A Repository can be served either locally or via http(s) (at the moment of writing). Luet supports multiple-repositories with priorities by default.&lt;/p&gt;

&lt;h2 id=&#34;create-a-repository&#34;&gt;Create a repository&lt;/h2&gt;

&lt;pre&gt;&lt;code&gt;Generate and renew repository metadata

Usage:
  luet create-repo [flags]

Flags:
      --descr string              Repository description (default &amp;quot;luet&amp;quot;)
  -h, --help                      help for create-repo
      --name string               Repository name (default &amp;quot;luet&amp;quot;)
      --output string             Destination folder (default current dir)
      --packages string           Packages folder (output from build) (default current dir)
      --reset-revision            Reset repository revision.
      --tree string               Source luet tree (default &amp;quot;/home/mudler/_git/luet/test&amp;quot;)
      --tree-compression string   Compression alg: none, gzip (default &amp;quot;none&amp;quot;)
      --tree-path string          Repository tree filename (default &amp;quot;tree.tar&amp;quot;)
      --type string               Repository type (disk) (default &amp;quot;disk&amp;quot;)
      --urls strings              Repository URLs

Global Flags:
      --concurrency int   Concurrency (default 8)
      --config string     config file (default is $HOME/.luet.yaml)
      --fatal             Enables Warnings to exit
  -v, --verbose           verbose output

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;After issuing a &lt;code&gt;luet build&lt;/code&gt;, the packages are present in the output build folder. The &lt;code&gt;create-repo&lt;/code&gt; step is needed to generate a portable tree which is read by the clients, and a &lt;code&gt;repository.yaml&lt;/code&gt; which contains the repository metadata.&lt;/p&gt;

&lt;p&gt;Note that the output of create-repo is &lt;em&gt;additive&lt;/em&gt; so it integrates with the current build content. The repository is composed by the &lt;code&gt;build&lt;/code&gt; output command and the &lt;code&gt;create-repo&lt;/code&gt; metadata.&lt;/p&gt;

&lt;h3 id=&#34;flags&#34;&gt;Flags&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;&amp;ndash;descr&lt;/strong&gt;: Repository description&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;&amp;ndash;name&lt;/strong&gt;: Repository name&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;&amp;ndash;output&lt;/strong&gt;: Metadata output folder (while a different path can be specified, it&amp;rsquo;s prefered to output the metadata files directly to the package directory).This most of the time matches the packages path for convenience.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;&amp;ndash;packages&lt;/strong&gt;: Directory where built packages are stored. This most of the time is also the output path.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;&amp;ndash;reset-revision&lt;/strong&gt;: Reset the repository revision number&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;&amp;ndash;tree-path&lt;/strong&gt;: Specify a custom name for the tree path. (Defaults to tree.tar)&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;&amp;ndash;tree-compression&lt;/strong&gt;: Specify a compression algorithm for the tree. (Available: gzip, Defaults: none)&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;&amp;ndash;tree&lt;/strong&gt;: Path of the tree which was used to generate the packages.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;&amp;ndash;type&lt;/strong&gt;: Repository type (http/local). It is just descriptive, the clients will be able to consume the repo in whatsoever way it is served.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;&amp;ndash;urls&lt;/strong&gt;: List of URIS where the repository is available&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;example&#34;&gt;Example&lt;/h2&gt;

&lt;p&gt;Build a package and generate the repository metadata:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$&amp;gt; mkdir package

$&amp;gt; cat &amp;lt;&amp;lt;EOF &amp;gt; package/build.yaml
image: busybox
steps:
- echo &amp;quot;foo&amp;quot; &amp;gt; /foo
EOF

$&amp;gt; cat &amp;lt;&amp;lt;EOF &amp;gt; package/definition.yaml
name: &amp;quot;foo&amp;quot;
version: &amp;quot;0.1&amp;quot;
category: &amp;quot;bar&amp;quot; # optional!
EOF

$&amp;gt; luet build --all --destination $PWD/out/ --tree $PWD/package

üì¶  Selecting  foo 0.1
üì¶  Compiling foo version 0.1 .... ‚òï
üêã  Downloading image luet/cache-foo-bar-0.1-builder
üêã  Downloading image luet/cache-foo-bar-0.1
üì¶   foo Generating üêã  definition for builder image from busybox
üêã  Building image luet/cache-foo-bar-0.1-builder
üêã  Building image luet/cache-foo-bar-0.1-builder done
 Sending build context to Docker daemon  4.096kB
 ...

$&amp;gt; luet create-repo --name &amp;quot;test&amp;quot; --output $PWD/out --packages $PWD/out --tree $PWD/package
 For repository test creating revision 1 and last update 1580641614...

$&amp;gt; ls out
foo-bar-0.1-builder.image.tar  foo-bar-0.1.image.tar  foo-bar-0.1.metadata.yaml  foo-bar-0.1.package.tar  repository.yaml  tree.tar

&lt;/code&gt;&lt;/pre&gt;

      </description>
    </item>
    
  </channel>
</rss>
